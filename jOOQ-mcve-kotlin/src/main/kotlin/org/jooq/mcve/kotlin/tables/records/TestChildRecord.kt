/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.kotlin.tables.TestChild
import org.jooq.types.YearToSecond


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TestChildRecord() : UpdatableRecordImpl<TestChildRecord>(TestChild.TEST_CHILD), Record3<Int?, Int?, YearToSecond?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var testId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var time: YearToSecond?
        set(value): Unit = set(2, value)
        get(): YearToSecond? = get(2) as YearToSecond?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Int?, Int?, YearToSecond?> = super.fieldsRow() as Row3<Int?, Int?, YearToSecond?>
    override fun valuesRow(): Row3<Int?, Int?, YearToSecond?> = super.valuesRow() as Row3<Int?, Int?, YearToSecond?>
    override fun field1(): Field<Int?> = TestChild.TEST_CHILD.ID
    override fun field2(): Field<Int?> = TestChild.TEST_CHILD.TEST_ID
    override fun field3(): Field<YearToSecond?> = TestChild.TEST_CHILD.TIME
    override fun component1(): Int? = id
    override fun component2(): Int? = testId
    override fun component3(): YearToSecond? = time
    override fun value1(): Int? = id
    override fun value2(): Int? = testId
    override fun value3(): YearToSecond? = time

    override fun value1(value: Int?): TestChildRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): TestChildRecord {
        this.testId = value
        return this
    }

    override fun value3(value: YearToSecond?): TestChildRecord {
        this.time = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: YearToSecond?): TestChildRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised TestChildRecord
     */
    constructor(id: Int? = null, testId: Int? = null, time: YearToSecond? = null): this() {
        this.id = id
        this.testId = testId
        this.time = time
    }
}
