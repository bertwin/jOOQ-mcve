/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.mcve.kotlin.Mcve
import org.jooq.mcve.kotlin.keys.TEST_CHILD_PKEY
import org.jooq.mcve.kotlin.keys.TEST_CHILD__TEST_CHILD_TEST_ID_FKEY
import org.jooq.mcve.kotlin.tables.records.TestChildRecord
import org.jooq.types.YearToSecond


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TestChild(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TestChildRecord>?,
    aliased: Table<TestChildRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TestChildRecord>(
    alias,
    Mcve.MCVE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>mcve.test_child</code>
         */
        val TEST_CHILD: TestChild = TestChild()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TestChildRecord> = TestChildRecord::class.java

    /**
     * The column <code>mcve.test_child.id</code>.
     */
    val ID: TableField<TestChildRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>mcve.test_child.test_id</code>.
     */
    val TEST_ID: TableField<TestChildRecord, Int?> = createField(DSL.name("test_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>mcve.test_child.time</code>.
     */
    val TIME: TableField<TestChildRecord, YearToSecond?> = createField(DSL.name("time"), SQLDataType.INTERVAL, this, "")

    private constructor(alias: Name, aliased: Table<TestChildRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TestChildRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>mcve.test_child</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mcve.test_child</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mcve.test_child</code> table reference
     */
    constructor(): this(DSL.name("test_child"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TestChildRecord>): this(Internal.createPathAlias(child, key), child, key, TEST_CHILD, null)
    override fun getSchema(): Schema? = if (aliased()) null else Mcve.MCVE
    override fun getIdentity(): Identity<TestChildRecord, Int?> = super.getIdentity() as Identity<TestChildRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TestChildRecord> = TEST_CHILD_PKEY
    override fun getReferences(): List<ForeignKey<TestChildRecord, *>> = listOf(TEST_CHILD__TEST_CHILD_TEST_ID_FKEY)

    private lateinit var _test: Test

    /**
     * Get the implicit join path to the <code>mcve.test</code> table.
     */
    fun test(): Test {
        if (!this::_test.isInitialized)
            _test = Test(this, TEST_CHILD__TEST_CHILD_TEST_ID_FKEY)

        return _test;
    }

    val test: Test
        get(): Test = test()
    override fun `as`(alias: String): TestChild = TestChild(DSL.name(alias), this)
    override fun `as`(alias: Name): TestChild = TestChild(alias, this)
    override fun `as`(alias: Table<*>): TestChild = TestChild(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TestChild = TestChild(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TestChild = TestChild(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TestChild = TestChild(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, Int?, YearToSecond?> = super.fieldsRow() as Row3<Int?, Int?, YearToSecond?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, YearToSecond?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, YearToSecond?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
