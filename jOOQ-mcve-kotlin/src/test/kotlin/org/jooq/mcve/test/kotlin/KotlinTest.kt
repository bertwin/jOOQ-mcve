package org.jooq.mcve.test.kotlin

import org.jooq.DSLContext
import org.jooq.Records
import org.jooq.impl.DSL
import org.jooq.impl.DSL.*
import org.jooq.impl.SQLDataType
import org.jooq.mcve.kotlin.tables.references.TEST
import org.jooq.mcve.kotlin.tables.references.TEST_CHILD
import org.jooq.types.YearToSecond
import org.junit.After
import org.junit.Assert.assertEquals
import org.junit.Assert.assertNotNull
import org.junit.Before
import org.junit.Test
import java.sql.DriverManager
import java.time.Duration
import org.jooq.util.postgres.PostgresUtils

class KotlinTest {

    var connection: java.sql.Connection? = null
    var ctx: DSLContext? = null

    @Before
    fun setup() {
        connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/jooq-mcve-kotlin-2", "sa", "")
        ctx = DSL.using(connection)
        ctx().delete(TEST_CHILD).execute()
        ctx().delete(TEST).execute()
    }

    @After
    fun after() {
        ctx = null
        connection!!.close()
        connection = null
    }

    fun ctx(): DSLContext = ctx!!





    @Test
    fun mcveTestMinimal() {
        assertEquals(1,ctx().insertInto(TEST_CHILD)
            .columns(TEST_CHILD.TIME)
            .values(YearToSecond.valueOf(Duration.ofHours(3)))
            .execute())

        val result = ctx().select(row(TEST_CHILD.TIME))
            .from(TEST_CHILD)
            .fetch()

        assertEquals(1, result.size)
    }




    @Test
    fun mcveTestWorkaround() {
        assertEquals(1,ctx().insertInto(TEST_CHILD)
            .columns(TEST_CHILD.TIME)
            .values(YearToSecond.valueOf(Duration.ofHours(3)))
            .execute())

        // WORKAROUND
        val timeField = field(TEST_CHILD.TIME.qualifiedName, SQLDataType.VARCHAR).convertFrom { PostgresUtils.toYearToSecond(it) }

        val result = ctx().select(row(timeField))
            .from(TEST_CHILD)
            .fetch()

        assertEquals(1, result.size)

    }


    // Example with realworld context

    data class Project(val cd: Int, val worklog: List<WorkLog>)
    data class WorkLog(val time: Duration)


    @Test
    fun mcveTestWithContext() {
        assertEquals(1, ctx()
            .insertInto(TEST)
            .columns(TEST.CD)
            .values(42)
            .execute()
        )

        val record = ctx().fetchOne(TEST, TEST.CD.eq(42))
        assertNotNull(record?.id)

        assertEquals(1,ctx().insertInto(TEST_CHILD)
            .columns(TEST_CHILD.TEST_ID, TEST_CHILD.TIME)
            .values(record?.id, YearToSecond.valueOf(Duration.ofHours(3)))
            .execute())

        val result = ctx().select(TEST.CD, array(
            select(row(TEST_CHILD.TIME).mapping(WorkLog::class.java) { time ->
                WorkLog(
                    time?.toDuration() ?: Duration.ZERO
                )
            })
                .from(TEST_CHILD)
                .where(TEST.ID.eq(TEST_CHILD.TEST_ID))
        ).convertFrom { it?.toList() })
            .from(TEST)
            .fetch(Records.mapping { cd, children -> Project(cd ?: 0, children ?: emptyList()) })

        assertEquals(Duration.ofHours(3), result.first().worklog.first().time)

    }
}